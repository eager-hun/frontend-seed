/**
 * @file
 * Cheap grid.
 *
 * TODO.
 */

.cheap-grid--fixed {
  @include cheap-grid($wrap: true);

  & > .cheap-grid__item {
    @include cheap-grid-item();
  }
}

// In case grids get nested.
.cheap-grid__item {
  & > .cheap-grid {
    flex: 1 1 auto;
  }
}

// -----------------------------------------------------------------------------
// Option to "steer" grid items with classes on them.

// NOTE: this is a "second-best" option, as it has several shortcomings:
// - due to media-query support not being implemented, these grid-items don't
//   adapt to screen-width-change, so on mobile they will likely be badly
//   crammed.
// - when the grid wraps, there is no solution offered to keep a vertical gap
//   between the wrapped items.

// A better option might be is to "sculpt" custom grids with the grid-related
// mixins.

.cheap-grid--fixed {
  .cheap-grid__item {
    &.full {
      @include apply-grid-item-width(1, 1);
    }
    &.three-quarters {
      @include apply-grid-item-width(3, 4);
    }
    &.two-thirds {
      @include apply-grid-item-width(2, 3);
    }
    &.half {
      @include apply-grid-item-width(1, 2);
    }
    &.third {
      @include apply-grid-item-width(1, 3);
    }
    &.quarter {
      @include apply-grid-item-width(1, 4);
    }
  }
}

// -----------------------------------------------------------------------------
// Collapsing grids.

.cheap-grid.grid-collapsing {
  margin-left: 0;
  margin-right: 0;

  & > .cheap-grid__item {
    padding-left: 0;
    padding-right: 0;
  }
}

// -----------------------------------------------------------------------------
// Vertical gap between adjacent grid instances.

.cheap-grid + .cheap-grid {
  @include gap(margin, top, 1);
}
