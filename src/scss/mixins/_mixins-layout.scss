
@mixin micro-clearfix {
  // See http://nicolasgallagher.com/micro-clearfix-hack/ .
  &::before,
  &::after {
    content: '';
    display: table;
  }
  &::after {
    clear: both;
  }
  // WARNING: This rule interferes with ::before and ::after pseudo-elements.
  //          Take that into account when applying this anywhere.
}

// Passes control of providing whitespace between groups of contents to
// containing elements (e.g. layouts), by removing possibly disruptive margins
// from the children.
@mixin fit-content {
  & > *:first-child {
    margin-top: 0;
  }
  & > *:last-child {
    margin-bottom: 0;
  }
}

@mixin gap($implemented-as, $applied-at: all, $multiplier: 1, $gap-map: $grid-column-gutters) {
  @if $applied-at == (all) {
    @each $breakpoint, $gap in $gap-map {
      @if $breakpoint == (initial) {
        #{$implemented-as}: $gap * $multiplier;
      }
      @else {
        @media (min-width: breakpoint($breakpoint)) {
          #{$implemented-as}: $gap * $multiplier;
        }
      }
    }
  }
  @else if $applied-at == (horizontal) {
    @each $breakpoint, $gap in $gap-map {
      @if $breakpoint == (initial) {
        #{$implemented-as}-left: $gap * $multiplier;
        #{$implemented-as}-right: $gap * $multiplier;
      }
      @else {
        @media (min-width: breakpoint($breakpoint)) {
          #{$implemented-as}-left: $gap * $multiplier;
          #{$implemented-as}-right: $gap * $multiplier;
        }
      }
    }
  }
  @else if $applied-at == (vertical) {
    @each $breakpoint, $gap in $gap-map {
      @if $breakpoint == (initial) {
        #{$implemented-as}-top: $gap * $multiplier;
        #{$implemented-as}-bottom: $gap * $multiplier;
      }
      @else {
        @media (min-width: breakpoint($breakpoint)) {
          #{$implemented-as}-top: $gap * $multiplier;
          #{$implemented-as}-bottom: $gap * $multiplier;
        }
      }
    }
  }
  @else {
    @each $breakpoint, $gap in $gap-map {
      @if $breakpoint == (initial) {
        #{$implemented-as}-#{$applied-at}: $gap * $multiplier;
      } @else {
        @media (min-width: breakpoint($breakpoint)) {
          #{$implemented-as}-#{$applied-at}: $gap * $multiplier;
        }
      }
    }
  }
}
