/**
 * @file
 * SASS mixins.
 *
 * Mixins vs Extending utility-role Placeholders?
 *
 * Mixins won, placeholders lost so badly that they will not be used. Repetition
 * originating from using mixins will be mitigated by gzip serving the resulting
 * files (gzip works well on repeated patterns, they say).
 *
 * @see
 * http://www.sitepoint.com/avoid-sass-extend/
 * http://csswizardry.com/2014/11/when-to-use-extend-when-to-use-a-mixin/
 *
 * NOTES on basic syntax:
 * @code
 *   @mixin test-mixin--box($bg: gold, $padding: 1em) {
 *     background: $bg;
 *     padding: $padding;
 *
 *     @if $bg == (gold) and $padding == (1em) {
 *       border: 1px solid red;
 *     }
 *     @else if $bg == (gold) and $padding != (1em) {
 *       border: 5px solid red;
 *     }
 *     @else {
 *       border: 3px solid black;
 *     }
 *   }
 * @endcode
 */


// #############################################################################
// Grid-related mixins.

// NOTE: look at `includePaths` sass compiler option (in gulpfile.js) to find
// out where these are included from.
@import 'foundation-lean-grid-deps';
@import 'foundation-lean-grid';


// #############################################################################
// Resets.

@mixin bare-list {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

@mixin strip-button {
  appearance: none;
  background-color: transparent;
  border: none;
  margin: 0;
  padding: 0;
}


// #############################################################################
// Typography-related mixins.

@mixin headings-base {
  display: block;
  line-height: $line-height-headings;

  font-family: $font-sans;
  font-weight: normal;
  font-style: normal;
  text-rendering: optimizeLegibility;

  color: color(text);
}

@mixin heading-aftereffects($heading) {
  @if $heading == (h1) {
    font-size: 2em;
    margin-top: 1.5em;
    margin-bottom: 1em;
  }
  @else if $heading == (h2) {
    font-size: 1.6em;
    margin-top: 1.5em;
    margin-bottom: 0.85em;
  }
  @else if $heading == (h2-underlined) {
    border-bottom: 1px solid color(border);
    font-size: 1.6em;
    padding-bottom: 0.25em;
    margin-bottom: 0.85em;
  }
  @else if $heading == (h3) {
    font-size: 1.45em;
    margin-top: 1.75em;
    margin-bottom: 0.85em;
  }
  @else if $heading == (h4) {
    font-size: 1.3em;
    margin-top: 1.5em;
    margin-bottom: 0.65em;
  }
  @else if $heading == (h5) {
    font-size: 1.15em;
    margin-top: 1.5em;
    margin-bottom: 0.65em;
  }
  @else if $heading == (h6) {
    font-size: 1.05em;
    margin-top: 1.5em;
    margin-bottom: 0.6em;
  }
}

@mixin font-smoothing($switch) {
  @if $switch == (on) {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-smooth: always;
  }
  @else {
    -webkit-font-smoothing: initial;
    -moz-osx-font-smoothing: auto;
    font-smooth: never;
  }
}

// #############################################################################
// Layout.

@mixin micro-clearfix {
  // See http://nicolasgallagher.com/micro-clearfix-hack/ .
  &::before,
  &::after {
    content: '';
    display: table;
  }
  &::after {
    clear: both;
  }
  // WARNING: This rule interferes with ::before and ::after pseudo-elements.
  //          Take that into account when applying this anywhere.
}

// Passes control of providing whitespace between groups of contents to
// containing elements (e.g. layouts), by removing possibly disruptive margins
// from the children.
@mixin fit-content {
  & > *:first-child {
    margin-top: 0;
  }
  & > *:last-child {
    margin-bottom: 0;
  }
}

// -----------------------------------------------------------------------------
// Grid-related mixins.

// Apply on `.row`s.
@mixin grid-with-cols($n) {
  & > .column {
    @include grid-column($grid-column-count / $n);
  }
}

// Apply on `.row`s.
@mixin grid-wrapping-base {
  & > .column + .column {
    @each $breakpoint, $gutter in $grid-column-gutter {
      @include breakpoint($breakpoint) {
        margin-top: $gutter;
      }
    }
  }
}

// Apply on `.row`s.
// See http://nth-test.com/
@mixin grid-wrapping-for-cols($n) {
  & > .column {
    @include grid-column-end;

    // Resetting potentially previously set clear-ings.
    // Specificity hack.
    &.column {
      clear: none;
    }

    &:nth-child(#{$n}n+#{$n+1}) {
      clear: both;
    }

    &:nth-child(-n+#{$n}) {
      margin-top: 0;
    }
  }
}

// Note: this will work only if a modernizr build is included and is producing
// an .mdz-flexbox class on the :root element.
//
// See https://css-tricks.com/snippets/css/a-guide-to-flexbox/ .
//
// Apply on `.row`s.
@mixin flexboxify-floated-grid(
  $column-selector: '.column',
  $payload-selector: '.box',
  $flex: 0 1 auto,
  $flex-wrap: wrap,
  $breakpoint: wide-min
) {
  @include breakpoint($breakpoint) {

    // TODO: actually do modernizr check!
    //.mdz-flexbox & {

      display: flex;
      flex-direction: row;
      flex-wrap: $flex-wrap;

      // Removing the elements that were used for the micro-clearfix hack.
      &::before,
      &::after {
        display: none;
      }

      & > #{$column-selector} {
        display: flex;
        flex: $flex;
        float: none;

        // Stretching the actual box that is sitting in the `.column`.
        & > #{$payload-selector} {
          flex: 0 1 auto;
          width: 100%;
          max-width: 100%;
        }
      }
    //}
  }
}


// #############################################################################
// Basic utils.

@mixin hidden {
  // Hiding texts visually, but enabling screen readers to read them.
  // See http://webaim.org/techniques/css/invisiblecontent/ .
  height: 1px;
  left: -9999em;
  top: auto;
  overflow: hidden;
  position: absolute;
  width: 1px;
}


// #############################################################################
// Components.

// -----------------------------------------------------------------------------
// Content titles.

@mixin page-title-appearance() {
  @include headings-base;
  @include heading-aftereffects(h1);

  margin-bottom: 0;

  &::after {
    @include line-height-fit($line-height-headings, top, 1.5);
    @include vertical-gap(margin, bottom);

    content: '';
    display: block;
    height: 0;
  }

  &:only-child {
    @include line-height-fit($line-height-headings, bottom, 2);

    &::after {
      display: none;
    }
  }
}

@mixin box-title-appearance() {
  @include headings-base;
  @include heading-aftereffects(h4);

  @include line-height-fit($line-height-headings, top);
}

// -----------------------------------------------------------------------------
// Color zones.

@mixin override-link-color($color, $hover-color: $color) {
  &,
  &:active,
  &:visited {
    color: $color;
  }
  &:hover,
  &:visited:hover {
    color: $hover-color;
  }
}

@mixin color-zone-brand {
  background-color: color(brand);

  &,
  & h2 {
    color: color(text-invert);
  }
  & a {
    @include override-link-color(color(link-invert));
  }

  -webkit-tap-highlight-color: rgba(color(prim), 0.25);

  // This is experimental.
  ::selection {
    background: rgba(color(bg-dark), 0.5);
    color: color(text-invert);
  }
  ::-moz-selection {
    background: rgba(color(bg-dark), 0.5);
    color: color(text-invert);
  }
}

@mixin color-zone-accent-1 {
  background-color: color(accent-1);

  &,
  & h2,
  & h3,
  & .box__title {
    color: color(text-invert);
  }
  & a {
    @include override-link-color(color(link-invert));
  }

  // This is experimental.
  ::selection {
    background: rgba(color(bg-dark), 0.5);
    color: color(text-invert);
  }
  ::-moz-selection {
    background: rgba(color(bg-dark), 0.5);
    color: color(text-invert);
  }
}

@mixin color-zone-accent-2 {
  background-color: color(accent-2);

  &,
  & h2,
  & h3,
  & .box__title {
    color: color(text-invert);
  }
  & a {
    @include override-link-color(color(link-invert));
  }

  // This is experimental.
  ::selection {
    background: rgba(color(bg-dark), 0.5);
    color: color(text-invert);
  }
  ::-moz-selection {
    background: rgba(color(bg-dark), 0.5);
    color: color(text-invert);
  }
}

@mixin color-zone-black {
  background-color: color(bg-dark);

  &,
  & h2,
  & h3,
  & .box__title {
    color: color(text-invert);
  }
  & a {
    @include override-link-color(color(link-invert));
  }
}

// -----------------------------------------------------------------------------
// Misc components.

@mixin description-appearance {
  font-size: 0.9rem;
  font-style: italic;

  p {
    line-height: $line-height-condensed;
    margin: 0.5em 0;
  }
}

