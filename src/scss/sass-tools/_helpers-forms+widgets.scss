

@function input-inset-box-shadow($color, $extent: 0.35em) {
  @return (0 0 $extent $color inset);
}


@function input-focus-box-shadow($color) {
  @return (0 0 0 $form-widget-focus-outline-width $color);
}


$input-inset-box-shadow: input-inset-box-shadow(
  map-get(
    $form-colors-default,
    inset-box-shadow-color
  )
);

@mixin input-look-and-feel() {
  background: map-get($form-colors-default, background-color);
  border: 1px solid map-get($form-colors-default, border-color);
  border-radius: $form-widget-border-radius;
  box-shadow: $input-inset-box-shadow;

  color: map-get($form-colors-default, value-color);

  font-family: $font-sans;
  font-weight: 400;
  font-style: normal;

  transition: all $transition-speed-fast $transition-easing-default;
}

@mixin input-look-and-feel-focus() {
  border-color: map-get($form-colors-default, border-color-focus);

  $focus-box-shadow: input-focus-box-shadow(
    map-get(
      $form-colors-default,
      focus-box-shadow-color
    )
  );
  box-shadow: $input-inset-box-shadow, $focus-box-shadow;

  outline: none;
}


@mixin input-look-and-feel-disabled() {
  background: map-get($form-colors-default, background-color-disabled);
  border-color: map-get($form-colors-default, border-color-disabled);
  box-shadow: rgba(color(shadow), 0.1) 0 0 0.5em inset;
}


@mixin input-look-and-feel-readonly() {
  box-shadow: none;

  &:focus {
    $focus-box-shadow: input-focus-box-shadow(
        map-get(
            $form-colors-default,
            focus-box-shadow-color
        )
    );
    box-shadow: $focus-box-shadow;
  }
}

$inset-box-shadow-has-error: input-inset-box-shadow(
  map-get(
    $form-colors-default,
    inset-box-shadow-color-error
  )
);

@mixin input-look-and-feel-has-error() {
  background-color: map-get($form-colors-default, background-color-error);
  border-color: map-get($form-colors-default, border-color-error);
  box-shadow: $inset-box-shadow-has-error;
}

@mixin input-look-and-feel-has-error-focus() {
  border-color: map-get($form-colors-default, border-color-focus-error);

  $focus-box-shadow: input-focus-box-shadow(
      map-get(
          $form-colors-default,
          focus-box-shadow-color-error
      )
  );
  box-shadow: $inset-box-shadow-has-error, $focus-box-shadow;

  outline: none;
}


@mixin widget-vertical-padding-to-match-oneliners($widget-height, $line-height) {
  padding-top: calc(((#{$widget-height} - (#{$line-height} * 1em)) / 2) - 1px);
  padding-bottom: calc(((#{$widget-height} - (#{$line-height} * 1em)) / 2) - 1px);
}


@function button-inset-box-shadows() {
  // These inset shadows add a vertical linear-gradient-like color shift,
  // but with the added benefit that the bg-color remains transitionable.
  @return (
    0 $btn-shdw-size $btn-shdw-size $btn-shdw-size * -1 rgba(white, 0.66) inset,
    0 $btn-shdw-size * -1 $btn-shdw-size $btn-shdw-size * -1 rgba(black, 0.25) inset
  );
}


@mixin form-size-variant-updates($size-variant) {

  // Extract variable from map, so that we can use it in calc().
  $oneliner-height: map-get($form-widget-oneliner-height, $size-variant);

  font-size: map-get($form-font-size, $size-variant);

  .input--oneliner,
  textarea
  {
    max-width: map-get($form-input-max-width, $size-variant);
  }

  .input--oneliner,
  .button--oneliner {
    height: $oneliner-height;
  }

  .button {
    min-height: $oneliner-height;
  }

  textarea,
  .button {
    @include widget-vertical-padding-to-match-oneliners(
        $oneliner-height,
        $line-height-condensed
    );
  }

  .button--oneliner {
    line-height: calc(#{$oneliner-height} - 2px);

    padding-top: 0;
    padding-bottom: 0;
  }

  // ---------------------------------------------------------------------------
  // Form arrangements.

  .widget-container:not(:first-child),
  fieldset:not(:first-child) {
    margin-top: map-get($form-items-vertical-gap, $size-variant);
  }

  @media (min-width: breakpoint($form-arrangement-layout-update-bkp)) {
    .form-arrangement {
      margin-top: map-get($form-items-vertical-gap, $size-variant) * -1;

      .widget-container {
        margin-top: map-get($form-items-vertical-gap, $size-variant);
      }
    }
  }
}


@mixin form-widgets-in-color-zone($color-zone) {
  $color-defs: map-get($form-colors-in-color-zones, $color-zone);

  .color-zone--#{$color-zone} {

    @if map-has-key($color-defs, label-color) {
      label {
        color: map-get($color-defs, label-color);
      }
    }

    .input--oneliner,
    textarea {

      @if map-has-key($color-defs, background-color) {
        background-color: map-get($color-defs, background-color);
      }
      @if map-has-key($color-defs, value-color) {
        color: map-get($color-defs, value-color);
      }
      @if map-has-key($color-defs, border-color) {
        border-color: map-get($color-defs, border-color);
      }
      @if map-has-key($color-defs, inset-box-shadow-color) {
        $initial-inset-box-shadow: input-inset-box-shadow(
          map-get(
            $color-defs,
            inset-box-shadow-color
          )
        );
        box-shadow: $initial-inset-box-shadow;

        // @techdebt: focus box shadow override will work only if inset was
        // overridden too...
        // Reason: we need to rely on $initial-inset-box-shadow in this
        // declaration...
        @if map-has-key($color-defs, focus-box-shadow-color) {
          &:focus {
            $initial-focus-box-shadow: input-focus-box-shadow(
              map-get(
                $color-defs,
                focus-box-shadow-color
              )
            );
            box-shadow: $initial-inset-box-shadow, $initial-focus-box-shadow;
          }
        }
      }

      &:focus {
        @if map-has-key($color-defs, border-color-focus) {
          border-color: map-get($color-defs, border-color-focus);
        }
      }

      &.has-error {
        @if map-has-key($color-defs, background-color-error) {
          background-color: map-get($color-defs, background-color-error);
        }
        @if map-has-key($color-defs, border-color-error) {
          border-color: map-get($color-defs, border-color-error);
        }
        @if map-has-key($color-defs, border-color-focus-error) {
          &:focus {
            border-color: map-get($color-defs, border-color-focus-error);
          }
        }

        @if map-has-key($color-defs, inset-box-shadow-color-error) {
          $error-inset-box-shadow: input-inset-box-shadow(
            map-get(
              $color-defs,
              inset-box-shadow-color-error
            )
          );
          box-shadow: $error-inset-box-shadow;

          &:focus {
            $error-focus-box-shadow: input-focus-box-shadow(
              map-get(
                $color-defs,
                focus-box-shadow-color-error
              )
            );
            box-shadow: $error-inset-box-shadow, $error-focus-box-shadow;
          }

        }
      }

      &:disabled {
        @if map-has-key($color-defs, background-color-disabled) {
          background-color: map-get($color-defs, background-color-disabled);
        }
        @if map-has-key($color-defs, border-color-disabled) {
          border-color: map-get($color-defs, border-color-disabled);
        }
      }

      &[readonly] {
        @if map-has-key($color-defs, inset-box-shadow-color) {
          box-shadow: none;

          $focus-box-shadow-for-disabled: input-focus-box-shadow(
            map-get(
              $color-defs,
              focus-box-shadow-color
            )
          );
          &:focus {
            box-shadow: $focus-box-shadow-for-disabled;
          }
        }
      }
    }

    @if map-has-key($color-defs, helptext-color) {
      .widget-container__helptext {
        color: map-get($color-defs, helptext-color);
      }
    }

    @if map-has-key($color-defs, errortext-color) {
      .widget-container__errortext {
        color: map-get($color-defs, errortext-color);
      }
    }
  }

}

@mixin button-in-color-zone($color-zone) {

}
